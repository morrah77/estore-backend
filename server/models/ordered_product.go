// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderedProduct ordered product
//
// swagger:model orderedProduct
type OrderedProduct struct {

	// in stock
	// Read Only: true
	InStock *bool `json:"inStock,omitempty"`

	// order Id
	// Read Only: true
	OrderID int64 `json:"orderId,omitempty"`

	// product Id
	// Required: true
	ProductID *int64 `json:"productId"`

	// product name
	// Read Only: true
	ProductName string `json:"productName,omitempty"`

	// quantity
	// Required: true
	Quantity *int64 `json:"quantity"`

	// total price
	// Required: true
	TotalPrice *float64 `json:"totalPrice"`
}

// Validate validates this ordered product
func (m *OrderedProduct) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProductID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalPrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderedProduct) validateProductID(formats strfmt.Registry) error {

	if err := validate.Required("productId", "body", m.ProductID); err != nil {
		return err
	}

	return nil
}

func (m *OrderedProduct) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

func (m *OrderedProduct) validateTotalPrice(formats strfmt.Registry) error {

	if err := validate.Required("totalPrice", "body", m.TotalPrice); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this ordered product based on the context it is used
func (m *OrderedProduct) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInStock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProductName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderedProduct) contextValidateInStock(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "inStock", "body", m.InStock); err != nil {
		return err
	}

	return nil
}

func (m *OrderedProduct) contextValidateOrderID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "orderId", "body", int64(m.OrderID)); err != nil {
		return err
	}

	return nil
}

func (m *OrderedProduct) contextValidateProductName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "productName", "body", string(m.ProductName)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderedProduct) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderedProduct) UnmarshalBinary(b []byte) error {
	var res OrderedProduct
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
