// Code generated by go-swagger; DO NOT EDIT.

package webhooks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ProcessStripePaymentHandlerFunc turns a function with the right signature into a process stripe payment handler
type ProcessStripePaymentHandlerFunc func(ProcessStripePaymentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ProcessStripePaymentHandlerFunc) Handle(params ProcessStripePaymentParams) middleware.Responder {
	return fn(params)
}

// ProcessStripePaymentHandler interface for that can handle valid process stripe payment params
type ProcessStripePaymentHandler interface {
	Handle(ProcessStripePaymentParams) middleware.Responder
}

// NewProcessStripePayment creates a new http.Handler for the process stripe payment operation
func NewProcessStripePayment(ctx *middleware.Context, handler ProcessStripePaymentHandler) *ProcessStripePayment {
	return &ProcessStripePayment{Context: ctx, Handler: handler}
}

/*
	ProcessStripePayment swagger:route POST /webhooks/stripe/payments webhooks payments processStripePayment

Process Stripe payment event
*/
type ProcessStripePayment struct {
	Context *middleware.Context
	Handler ProcessStripePaymentHandler
}

func (o *ProcessStripePayment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewProcessStripePaymentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
