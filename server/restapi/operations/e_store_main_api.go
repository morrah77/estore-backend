// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"estore-backend/server/models"
	"estore-backend/server/restapi/operations/auth"
	"estore-backend/server/restapi/operations/categories"
	"estore-backend/server/restapi/operations/category"
	"estore-backend/server/restapi/operations/order"
	"estore-backend/server/restapi/operations/orders"
	"estore-backend/server/restapi/operations/payment"
	"estore-backend/server/restapi/operations/payments"
	"estore-backend/server/restapi/operations/product"
	"estore-backend/server/restapi/operations/products"
	"estore-backend/server/restapi/operations/user"
	"estore-backend/server/restapi/operations/users"
)

// NewEStoreMainAPI creates a new EStoreMain instance
func NewEStoreMainAPI(spec *loads.Document) *EStoreMainAPI {
	return &EStoreMainAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		CategoriesAddCategoryHandler: categories.AddCategoryHandlerFunc(func(params categories.AddCategoryParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation categories.AddCategory has not yet been implemented")
		}),
		OrdersAddOrderHandler: orders.AddOrderHandlerFunc(func(params orders.AddOrderParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation orders.AddOrder has not yet been implemented")
		}),
		PaymentsAddPaymentHandler: payments.AddPaymentHandlerFunc(func(params payments.AddPaymentParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation payments.AddPayment has not yet been implemented")
		}),
		ProductsAddProductHandler: products.AddProductHandlerFunc(func(params products.AddProductParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation products.AddProduct has not yet been implemented")
		}),
		UsersAddUserHandler: users.AddUserHandlerFunc(func(params users.AddUserParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation users.AddUser has not yet been implemented")
		}),
		CategoryDeleteCategoryHandler: category.DeleteCategoryHandlerFunc(func(params category.DeleteCategoryParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation category.DeleteCategory has not yet been implemented")
		}),
		OrderDeleteOrderHandler: order.DeleteOrderHandlerFunc(func(params order.DeleteOrderParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation order.DeleteOrder has not yet been implemented")
		}),
		PaymentDeletePaymetHandler: payment.DeletePaymetHandlerFunc(func(params payment.DeletePaymetParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation payment.DeletePaymet has not yet been implemented")
		}),
		ProductDeleteProductHandler: product.DeleteProductHandlerFunc(func(params product.DeleteProductParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation product.DeleteProduct has not yet been implemented")
		}),
		UserDeleteUserHandler: user.DeleteUserHandlerFunc(func(params user.DeleteUserParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.DeleteUser has not yet been implemented")
		}),
		CategoryEditCategoryHandler: category.EditCategoryHandlerFunc(func(params category.EditCategoryParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation category.EditCategory has not yet been implemented")
		}),
		OrderEditOrderHandler: order.EditOrderHandlerFunc(func(params order.EditOrderParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation order.EditOrder has not yet been implemented")
		}),
		PaymentEditPaymentHandler: payment.EditPaymentHandlerFunc(func(params payment.EditPaymentParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation payment.EditPayment has not yet been implemented")
		}),
		ProductEditProductHandler: product.EditProductHandlerFunc(func(params product.EditProductParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation product.EditProduct has not yet been implemented")
		}),
		UserEditUserHandler: user.EditUserHandlerFunc(func(params user.EditUserParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.EditUser has not yet been implemented")
		}),
		AuthGetAccessTokenHandler: auth.GetAccessTokenHandlerFunc(func(params auth.GetAccessTokenParams) middleware.Responder {
			return middleware.NotImplemented("operation auth.GetAccessToken has not yet been implemented")
		}),
		CategoryGetCategoryHandler: category.GetCategoryHandlerFunc(func(params category.GetCategoryParams) middleware.Responder {
			return middleware.NotImplemented("operation category.GetCategory has not yet been implemented")
		}),
		OrderGetOrderHandler: order.GetOrderHandlerFunc(func(params order.GetOrderParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation order.GetOrder has not yet been implemented")
		}),
		UserGetOwnUserHandler: user.GetOwnUserHandlerFunc(func(params user.GetOwnUserParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.GetOwnUser has not yet been implemented")
		}),
		PaymentGetPaymentHandler: payment.GetPaymentHandlerFunc(func(params payment.GetPaymentParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation payment.GetPayment has not yet been implemented")
		}),
		ProductGetProductHandler: product.GetProductHandlerFunc(func(params product.GetProductParams) middleware.Responder {
			return middleware.NotImplemented("operation product.GetProduct has not yet been implemented")
		}),
		ProductsGetProductsHandler: products.GetProductsHandlerFunc(func(params products.GetProductsParams) middleware.Responder {
			return middleware.NotImplemented("operation products.GetProducts has not yet been implemented")
		}),
		UserGetUserHandler: user.GetUserHandlerFunc(func(params user.GetUserParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.GetUser has not yet been implemented")
		}),
		CategoriesListCategoriesHandler: categories.ListCategoriesHandlerFunc(func(params categories.ListCategoriesParams) middleware.Responder {
			return middleware.NotImplemented("operation categories.ListCategories has not yet been implemented")
		}),
		OrdersListOrdersHandler: orders.ListOrdersHandlerFunc(func(params orders.ListOrdersParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation orders.ListOrders has not yet been implemented")
		}),
		PaymentsListPaymentsHandler: payments.ListPaymentsHandlerFunc(func(params payments.ListPaymentsParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation payments.ListPayments has not yet been implemented")
		}),
		UsersListUsersHandler: users.ListUsersHandlerFunc(func(params users.ListUsersParams, principal *models.Principal) middleware.Responder {
			return middleware.NotImplemented("operation users.ListUsers has not yet been implemented")
		}),
		AuthLoginHandler: auth.LoginHandlerFunc(func(params auth.LoginParams) middleware.Responder {
			return middleware.NotImplemented("operation auth.Login has not yet been implemented")
		}),

		OauthSecurityAuth: func(token string, scopes []string) (*models.Principal, error) {
			return nil, errors.NotImplemented("oauth2 bearer auth (OauthSecurity) has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*EStoreMainAPI Capstone project: back-end */
type EStoreMainAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// OauthSecurityAuth registers a function that takes an access token and a collection of required scopes and returns a principal
	// it performs authentication based on an oauth2 bearer token provided in the request
	OauthSecurityAuth func(string, []string) (*models.Principal, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// CategoriesAddCategoryHandler sets the operation handler for the add category operation
	CategoriesAddCategoryHandler categories.AddCategoryHandler
	// OrdersAddOrderHandler sets the operation handler for the add order operation
	OrdersAddOrderHandler orders.AddOrderHandler
	// PaymentsAddPaymentHandler sets the operation handler for the add payment operation
	PaymentsAddPaymentHandler payments.AddPaymentHandler
	// ProductsAddProductHandler sets the operation handler for the add product operation
	ProductsAddProductHandler products.AddProductHandler
	// UsersAddUserHandler sets the operation handler for the add user operation
	UsersAddUserHandler users.AddUserHandler
	// CategoryDeleteCategoryHandler sets the operation handler for the delete category operation
	CategoryDeleteCategoryHandler category.DeleteCategoryHandler
	// OrderDeleteOrderHandler sets the operation handler for the delete order operation
	OrderDeleteOrderHandler order.DeleteOrderHandler
	// PaymentDeletePaymetHandler sets the operation handler for the delete paymet operation
	PaymentDeletePaymetHandler payment.DeletePaymetHandler
	// ProductDeleteProductHandler sets the operation handler for the delete product operation
	ProductDeleteProductHandler product.DeleteProductHandler
	// UserDeleteUserHandler sets the operation handler for the delete user operation
	UserDeleteUserHandler user.DeleteUserHandler
	// CategoryEditCategoryHandler sets the operation handler for the edit category operation
	CategoryEditCategoryHandler category.EditCategoryHandler
	// OrderEditOrderHandler sets the operation handler for the edit order operation
	OrderEditOrderHandler order.EditOrderHandler
	// PaymentEditPaymentHandler sets the operation handler for the edit payment operation
	PaymentEditPaymentHandler payment.EditPaymentHandler
	// ProductEditProductHandler sets the operation handler for the edit product operation
	ProductEditProductHandler product.EditProductHandler
	// UserEditUserHandler sets the operation handler for the edit user operation
	UserEditUserHandler user.EditUserHandler
	// AuthGetAccessTokenHandler sets the operation handler for the get access token operation
	AuthGetAccessTokenHandler auth.GetAccessTokenHandler
	// CategoryGetCategoryHandler sets the operation handler for the get category operation
	CategoryGetCategoryHandler category.GetCategoryHandler
	// OrderGetOrderHandler sets the operation handler for the get order operation
	OrderGetOrderHandler order.GetOrderHandler
	// UserGetOwnUserHandler sets the operation handler for the get own user operation
	UserGetOwnUserHandler user.GetOwnUserHandler
	// PaymentGetPaymentHandler sets the operation handler for the get payment operation
	PaymentGetPaymentHandler payment.GetPaymentHandler
	// ProductGetProductHandler sets the operation handler for the get product operation
	ProductGetProductHandler product.GetProductHandler
	// ProductsGetProductsHandler sets the operation handler for the get products operation
	ProductsGetProductsHandler products.GetProductsHandler
	// UserGetUserHandler sets the operation handler for the get user operation
	UserGetUserHandler user.GetUserHandler
	// CategoriesListCategoriesHandler sets the operation handler for the list categories operation
	CategoriesListCategoriesHandler categories.ListCategoriesHandler
	// OrdersListOrdersHandler sets the operation handler for the list orders operation
	OrdersListOrdersHandler orders.ListOrdersHandler
	// PaymentsListPaymentsHandler sets the operation handler for the list payments operation
	PaymentsListPaymentsHandler payments.ListPaymentsHandler
	// UsersListUsersHandler sets the operation handler for the list users operation
	UsersListUsersHandler users.ListUsersHandler
	// AuthLoginHandler sets the operation handler for the login operation
	AuthLoginHandler auth.LoginHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *EStoreMainAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *EStoreMainAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *EStoreMainAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *EStoreMainAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *EStoreMainAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *EStoreMainAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *EStoreMainAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *EStoreMainAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *EStoreMainAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the EStoreMainAPI
func (o *EStoreMainAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.OauthSecurityAuth == nil {
		unregistered = append(unregistered, "OauthSecurityAuth")
	}

	if o.CategoriesAddCategoryHandler == nil {
		unregistered = append(unregistered, "categories.AddCategoryHandler")
	}
	if o.OrdersAddOrderHandler == nil {
		unregistered = append(unregistered, "orders.AddOrderHandler")
	}
	if o.PaymentsAddPaymentHandler == nil {
		unregistered = append(unregistered, "payments.AddPaymentHandler")
	}
	if o.ProductsAddProductHandler == nil {
		unregistered = append(unregistered, "products.AddProductHandler")
	}
	if o.UsersAddUserHandler == nil {
		unregistered = append(unregistered, "users.AddUserHandler")
	}
	if o.CategoryDeleteCategoryHandler == nil {
		unregistered = append(unregistered, "category.DeleteCategoryHandler")
	}
	if o.OrderDeleteOrderHandler == nil {
		unregistered = append(unregistered, "order.DeleteOrderHandler")
	}
	if o.PaymentDeletePaymetHandler == nil {
		unregistered = append(unregistered, "payment.DeletePaymetHandler")
	}
	if o.ProductDeleteProductHandler == nil {
		unregistered = append(unregistered, "product.DeleteProductHandler")
	}
	if o.UserDeleteUserHandler == nil {
		unregistered = append(unregistered, "user.DeleteUserHandler")
	}
	if o.CategoryEditCategoryHandler == nil {
		unregistered = append(unregistered, "category.EditCategoryHandler")
	}
	if o.OrderEditOrderHandler == nil {
		unregistered = append(unregistered, "order.EditOrderHandler")
	}
	if o.PaymentEditPaymentHandler == nil {
		unregistered = append(unregistered, "payment.EditPaymentHandler")
	}
	if o.ProductEditProductHandler == nil {
		unregistered = append(unregistered, "product.EditProductHandler")
	}
	if o.UserEditUserHandler == nil {
		unregistered = append(unregistered, "user.EditUserHandler")
	}
	if o.AuthGetAccessTokenHandler == nil {
		unregistered = append(unregistered, "auth.GetAccessTokenHandler")
	}
	if o.CategoryGetCategoryHandler == nil {
		unregistered = append(unregistered, "category.GetCategoryHandler")
	}
	if o.OrderGetOrderHandler == nil {
		unregistered = append(unregistered, "order.GetOrderHandler")
	}
	if o.UserGetOwnUserHandler == nil {
		unregistered = append(unregistered, "user.GetOwnUserHandler")
	}
	if o.PaymentGetPaymentHandler == nil {
		unregistered = append(unregistered, "payment.GetPaymentHandler")
	}
	if o.ProductGetProductHandler == nil {
		unregistered = append(unregistered, "product.GetProductHandler")
	}
	if o.ProductsGetProductsHandler == nil {
		unregistered = append(unregistered, "products.GetProductsHandler")
	}
	if o.UserGetUserHandler == nil {
		unregistered = append(unregistered, "user.GetUserHandler")
	}
	if o.CategoriesListCategoriesHandler == nil {
		unregistered = append(unregistered, "categories.ListCategoriesHandler")
	}
	if o.OrdersListOrdersHandler == nil {
		unregistered = append(unregistered, "orders.ListOrdersHandler")
	}
	if o.PaymentsListPaymentsHandler == nil {
		unregistered = append(unregistered, "payments.ListPaymentsHandler")
	}
	if o.UsersListUsersHandler == nil {
		unregistered = append(unregistered, "users.ListUsersHandler")
	}
	if o.AuthLoginHandler == nil {
		unregistered = append(unregistered, "auth.LoginHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *EStoreMainAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *EStoreMainAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "OauthSecurity":
			result[name] = o.BearerAuthenticator(name, func(token string, scopes []string) (interface{}, error) {
				return o.OauthSecurityAuth(token, scopes)
			})

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *EStoreMainAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *EStoreMainAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *EStoreMainAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *EStoreMainAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the e store main API
func (o *EStoreMainAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *EStoreMainAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/categories"] = categories.NewAddCategory(o.context, o.CategoriesAddCategoryHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/orders"] = orders.NewAddOrder(o.context, o.OrdersAddOrderHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/payments"] = payments.NewAddPayment(o.context, o.PaymentsAddPaymentHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/products"] = products.NewAddProduct(o.context, o.ProductsAddProductHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/users"] = users.NewAddUser(o.context, o.UsersAddUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/categories/{id}"] = category.NewDeleteCategory(o.context, o.CategoryDeleteCategoryHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/orders/{id}"] = order.NewDeleteOrder(o.context, o.OrderDeleteOrderHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/payments/{id}"] = payment.NewDeletePaymet(o.context, o.PaymentDeletePaymetHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/products/{id}"] = product.NewDeleteProduct(o.context, o.ProductDeleteProductHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/users/{id}"] = user.NewDeleteUser(o.context, o.UserDeleteUserHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/categories/{id}"] = category.NewEditCategory(o.context, o.CategoryEditCategoryHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/orders/{id}"] = order.NewEditOrder(o.context, o.OrderEditOrderHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/payments/{id}"] = payment.NewEditPayment(o.context, o.PaymentEditPaymentHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/products/{id}"] = product.NewEditProduct(o.context, o.ProductEditProductHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/users/{id}"] = user.NewEditUser(o.context, o.UserEditUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/auth/cb"] = auth.NewGetAccessToken(o.context, o.AuthGetAccessTokenHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/categories/{id}"] = category.NewGetCategory(o.context, o.CategoryGetCategoryHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orders/{id}"] = order.NewGetOrder(o.context, o.OrderGetOrderHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/user"] = user.NewGetOwnUser(o.context, o.UserGetOwnUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/payments/{id}"] = payment.NewGetPayment(o.context, o.PaymentGetPaymentHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/products/{id}"] = product.NewGetProduct(o.context, o.ProductGetProductHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/products"] = products.NewGetProducts(o.context, o.ProductsGetProductsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{id}"] = user.NewGetUser(o.context, o.UserGetUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/categories"] = categories.NewListCategories(o.context, o.CategoriesListCategoriesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/orders"] = orders.NewListOrders(o.context, o.OrdersListOrdersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/payments"] = payments.NewListPayments(o.context, o.PaymentsListPaymentsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users"] = users.NewListUsers(o.context, o.UsersListUsersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/login"] = auth.NewLogin(o.context, o.AuthLoginHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *EStoreMainAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *EStoreMainAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *EStoreMainAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *EStoreMainAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *EStoreMainAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[um][path] = builder(h)
	}
}
