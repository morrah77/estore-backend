// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetProductsParams creates a new GetProductsParams object
// with the default values initialized.
func NewGetProductsParams() GetProductsParams {

	var (
		// initialize parameters with default values

		limitDefault = int32(24)
	)

	return GetProductsParams{
		Limit: &limitDefault,
	}
}

// GetProductsParams contains all the bound params for the get products operation
// typically these are obtained from a http.Request
//
// swagger:parameters getProducts
type GetProductsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	  Collection Format: csv
	*/
	CategoryIds []int64
	/*
	  In: query
	  Default: 24
	*/
	Limit *int32
	/*
	  In: query
	*/
	Offset *int64
	/*
	  In: query
	*/
	Search *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetProductsParams() beforehand.
func (o *GetProductsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCategoryIds, qhkCategoryIds, _ := qs.GetOK("categoryIds")
	if err := o.bindCategoryIds(qCategoryIds, qhkCategoryIds, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qSearch, qhkSearch, _ := qs.GetOK("search")
	if err := o.bindSearch(qSearch, qhkSearch, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCategoryIds binds and validates array parameter CategoryIds from query.
//
// Arrays are parsed according to CollectionFormat: "csv" (defaults to "csv" when empty).
func (o *GetProductsParams) bindCategoryIds(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvCategoryIds string
	if len(rawData) > 0 {
		qvCategoryIds = rawData[len(rawData)-1]
	}

	// CollectionFormat: csv
	categoryIdsIC := swag.SplitByFormat(qvCategoryIds, "csv")
	if len(categoryIdsIC) == 0 {
		return nil
	}

	var categoryIdsIR []int64
	for i, categoryIdsIV := range categoryIdsIC {
		// items.Format: "int64"
		categoryIdsI, err := swag.ConvertInt64(categoryIdsIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "categoryIds", i), "query", "int64", categoryIdsI)
		}

		categoryIdsIR = append(categoryIdsIR, categoryIdsI)
	}

	o.CategoryIds = categoryIdsIR

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetProductsParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetProductsParams()
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int32", raw)
	}
	o.Limit = &value

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *GetProductsParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int64", raw)
	}
	o.Offset = &value

	return nil
}

// bindSearch binds and validates parameter Search from query.
func (o *GetProductsParams) bindSearch(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Search = &raw

	return nil
}
